# Tomcat
server:
  port: 1212

# Spring
spring:
  application:
    # 应用名称
    name: authentication-demo
  # 数据源配置
  datasource:
    driverClassName: com.mysql.cj.jdbc.Driver
    username: root
    password: root
    url: jdbc:mysql://localhost:3306/authentication?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&useSSL=false&serverTimezone=GMT%2B8&allowMultiQueries=true&rewriteBatchedStatements=true

eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:9090/eureka

# MyBatis Plus
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl
  global-config:
    # 数据库相关配置
    db-config:
      #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: auto
      #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
      field-strategy: not_empty
      #驼峰下划线转换
      table-underline: true
      #是否开启大写命名，默认不开启
      #capital-mode: true
      #逻辑删除配置
      #logic-delete-value: 1
      #logic-not-delete-value: 0
      db-type: mysql
    #刷新mapper 调试神器
    refresh: true

mybatis:
  mapper-locations: classpath:mapper/*Mapper.xml

# 开启Feign支持Hystrix
feign:
  hystrix:
    enabled: true

# feign底层是ribbon的封装，所以直接配置ribbon，ribbon默认超时也是1秒。
# 所以这里都是强制要求，ribbon的超时时间要大于hystrix的超时时间，
# 否则hystrix自定义的超时时间毫无意义。所以还得加个ribbon超时时间设置
ribbon:
  # 请求处理的超时时间
  ReadTimeout: 10000
  # 请求连接超时时间
  ConnectTimeout: 10000
  # 对当前实例的重试次数
  MaxAutoRetries: 0
  # 切换实例的重试次数
  MaxAutoRetriesNextServer: 1

# Hystrix配置
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            # Feign整合Hystrix光设置Hystrix超时没用的要配合ribbon超时
            timeoutInMilliseconds: 3000
          # 信号量配置
          semaphore:
            maxConcurrentRequests: 1000
          strategy: SEMAPHORE
      circuitBreaker:
        # 默认20，熔断的阈值，如何user服务报错满足3次，熔断器就会打开，就算order之后请求正确的数据也不行。
        requestVolumeThreshold: 3
        # 默认5S，等5S之后熔断器会处于半开状态，然后下一次请求的正确和错误讲决定熔断器是否真的关闭和是否继续打开
        sleepWindowInMilliseconds: 8000
